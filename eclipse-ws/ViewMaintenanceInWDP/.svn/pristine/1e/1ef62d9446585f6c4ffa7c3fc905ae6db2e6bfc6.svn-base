package de.webdataplatform.parser;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import de.webdataplatform.system.MathUtil;
import de.webdataplatform.system.TableRecord;

public class Function implements ITerm{


	
	private String type;
	
	private ITerm term;

	
	public static List<String> getFunctions(){
		
		List<String> keywords = new ArrayList<String>();
		keywords.add("count");
		keywords.add("sum");
		keywords.add("min");
		keywords.add("max");
		keywords.add("avg");

		return keywords;
	}
	
	public static boolean isFunction(String string){
		
		return getFunctions().contains(string);
		
	}
	
	
	
	public Function(String type, ITerm term) {
		super();
		this.type = type;
		this.term = term;
	}

	
	public Integer buildCount(List<TableRecord> tableRecords){

		return tableRecords.size();
		
	}
	
	public Integer buildSum(List<TableRecord> tableRecords){
		
		Integer sum = 0;
		for (TableRecord tableRecord : tableRecords) {
			
			
			try {
				sum += eval(tableRecord);
			} catch (Exception e) {
				e.printStackTrace();
			}
			

		}
		return sum;
	}
	
	
	public Integer buildMin(List<TableRecord> tableRecords){
		
		Integer min = Integer.MAX_VALUE;
		for (TableRecord tableRecord : tableRecords) {
			
			
			Integer delta=null;
			try {
				delta = eval(tableRecord);
			} catch (Exception e) {
				e.printStackTrace();
			}
			if(delta < min)
				min = delta;
			
		}
		if(min == Integer.MAX_VALUE)return 0;
		return min;
	}
	
	public Integer buildMax(List<TableRecord> tableRecords){
		
		Integer max = Integer.MIN_VALUE;
		for (TableRecord tableRecord : tableRecords) {
			
			Integer delta=null;
			try {
				delta = eval(tableRecord);
			} catch (Exception e) {
				e.printStackTrace();
			}
			if(delta > max)
				max = delta;
			
		}
		if(max == Integer.MIN_VALUE)return 0;
		return max;
	}
	
	public Integer buildAvg(List<TableRecord> tableRecords){
		
		if(buildCount(tableRecords)== 0)return 0;
		return buildSum(tableRecords)/buildCount(tableRecords);
	}
	
	

	@Override
	public int eval(TableRecord tableRecord) throws Exception {

		return term.eval(tableRecord);
	}

	@Override
	public List<ColumnName> getBaseColumns() {
		List<ColumnName> result = new ArrayList<ColumnName>();
		result.addAll(term.getBaseColumns());
		return result;
	}


	@Override
	public String toString() {
		return "Function [type=" + type + ", term=" + term + "]";
	}

	@Override
	public int evalGrouping(List<TableRecord> tableRecords) throws Exception {

		Integer result=null;
		
		switch(type){
			case "count" : result = buildCount(tableRecords);
			break;
			case "sum" : result = buildSum(tableRecords);
			break;		
			case "min" : result = buildMin(tableRecords);
			break;				
			case "max" : result = buildMax(tableRecords);
			break;			
			case "avg" : result = buildAvg(tableRecords);
			break;			
		}
		
		return result;
	}
	
	
	
	

}
